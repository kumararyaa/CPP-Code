#include <bits/stdc++.h>
using namespace std;



/* TYPES  */
#define int long long
#define endl '\n'

/* FUNCTIONS */
class DisjointSet {
public: vector<int>size ; vector<int> parent; DisjointSet(int n) { size.resize(n, 1); parent.resize(n); for (int i = 0; i < n; i++) parent[i] = i; }
  void join(int a, int b) { int u_a = find(a); int u_b = find(b); if (u_a == u_b) {return;} if (size[u_a] < size[u_b]) {parent[u_a] = u_b; size[u_b] += size[u_a];} else {parent[u_b] = u_a; size[u_a] += size[u_b];} }
  int find(int a) { return a == parent[a] ? a : parent[a] = find(parent[a]); }
  bool check(int a, int b) { return find(a) == find(b);}
};
# define debug() cout<<"x\n";
bool sieve[100001];
void createSieve() {
  for (int i = 0; i < 100001; i++) {sieve[i] = true;} sieve[0] = false; sieve[1] = false; for (int i = 2; i * i < 100001; i++)
  {if (sieve[i]) {for (int j = i * i; j < 100001; j += i) {sieve[j] = false;}}}
}

/* UTILS */
#define MOD 1000000007
#define PI 3.1415926535897932384626433832795
int min(int a,int b) { if (a<b) return a; return b; }
int max(int a,int b) { if (a>b) return a; return b; }
int gcd(int a,int b) { if (b==0) return a; return gcd(b, a%b); }
int lcm(int a,int b) { return a/gcd(a,b)*b; }
bool prime(int a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }
void yes() { cout<<"YES\n"; }
void no() { cout<<"NO\n"; }



/* Main()  function */
int32_t main()
{
  
  #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
  #endif
  ios_base::sync_with_stdio(false);
  cin.tie(NULL); 
    
    
  int tc;
  cin>>tc;
  while(tc--){
      int n;
      cin>>n;
      vector<pair<int,int>>a;
      for(int i=0;i<n;i++){
      	int x;
      	cin>>x;
      	a.push_back({x,i});
      }
      sort(a.begin(), a.end());
      int val=0;
      for(int i=0;i<n;i++){
      	val+=(a[i].first-a[0].first+1);
      }
      vector<int>ans(n);
      ans[a[0].second]=val;
      for(int i=1;i<n;i++){
      	val-=(n-i)*(a[i].first-a[i-1].first);
      	val+=i*(a[i].first-a[i-1].first);
      	ans[a[i].second]=val;
      }
      for(auto it:ans){
      	cout<<it<<" ";
      }
      cout<<endl;
      
  }
  return 0;
}
